function avgPerf = fitnessIndex(delays)

% Solve an Autoregression Problem with External Input with a NARX Neural Network
% Script generated by NTSTOOL
% Created Sat Jul 05 18:26:55 CEST 2014
    
    % Load workspace
    load('tempWork.mat');

    inputSeries = tonndata(estimationMatrix,false,false);
    targetSeries = tonndata(estimationTargets,false,false);

    % Create a Nonlinear Autoregressive Network with External Input
    inputDelays = 1:delays(1);
    feedbackDelays = 1:delays(2);
    hiddenLayerSize = 15;
    net = narxnet(inputDelays,feedbackDelays,hiddenLayerSize);

    % Prepare the Data for Training and Simulation
    % The function PREPARETS prepares timeseries data for a particular network,
    % shifting time by the minimum amount to fill input states and layer states.
    % Using PREPARETS allows you to keep your original time series data unchanged, while
    % easily customizing it for networks with differing numbers of delays, with
    % open loop or closed loop feedback modes.
    [inputs,inputStates,layerStates,targets] = preparets(net,inputSeries,{},targetSeries);
    %net.trainParam.showWindow = 0;

    % Setup Division of Data for Training, Validation, Testing
    net.divideParam.trainRatio = 70/100;
    net.divideParam.valRatio = 15/100;
    net.divideParam.testRatio = 15/100;

    % Set average variable to zero
    avgPerf = 0;
    
    for i = 1:10
        % Train the Network
        [net,tr] = train(net,inputs,targets,inputStates,layerStates);

        % Test the Network
        outputs = net(inputs,inputStates,layerStates);
        performance = perform(net,targets,outputs);
        avgPerf = avgPerf + performance;
    end
    
    % Compute average performance
    avgPerf = avgPerf / 10;
    
    % Plots
    % Uncomment these lines to enable various plots.
    %figure, plotperform(tr)
    %figure, plottrainstate(tr)
    %figure, plotregression(targets,outputs)
    %figure, plotresponse(targets,outputs)
    %figure, ploterrcorr(errors)
    %figure, plotinerrcorr(inputs,errors)

end